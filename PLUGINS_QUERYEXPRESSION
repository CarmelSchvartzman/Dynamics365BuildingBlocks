RETRIEVE MULTIPLE - INTERSECT ENTITY : ONE-TO-MANY 
select ..... from .... inner join ... where .....  
 need to specify conditionExpression and Condition Operators - supports condition operators “Beginswith, Doesn’tbeginwith, Endswith,…” - group the conditions in filter criteria by using grouped AND / OR - maximum 5000 records in a single call - Can use Paging cookie  


#region Retrieve records from an intersect table via QueryExpression

QueryExpression query = new QueryExpression()
{
    EntityName = "role",
    ColumnSet = new ColumnSet("name"),
    LinkEntities = 
    {
        new LinkEntity
        {
            LinkFromEntityName = Role.EntityLogicalName,
            LinkFromAttributeName = "roleid",
            LinkToEntityName = SystemUserRoles.EntityLogicalName,
            LinkToAttributeName = "roleid",
            LinkCriteria = new FilterExpression
            {
                FilterOperator = LogicalOperator.And,
                Conditions = 
                {
                    new ConditionExpression
                    {
                        AttributeName = "systemuserid",
                        Operator = ConditionOperator.Equal,
                        Values = { _userId }
                    }
                }
            }
        }
    }
};


EntityCollection ec = _serviceProxy.RetrieveMultiple(query);
for (int i = 0; i < ec.Entities.Count; i++)
{
    Console.WriteLine("Query Expression Retrieved: {0}", ((Role)ec.Entities[i]).Name);
}

#endregion  




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
QUERYEXPRESSION:    MANY-TO-ONE :



QueryExpression queryExp = newQueryExpression(“account”);
queryExp.ColumnSet = new ColumnSet(true);
queryExp.Criteria.AddCondition(“name”, ConditionOperator.BeginsWith, “MS”);
queryExp.Criteria.AddCondition(“new_country”, ConditionOperator.Equal, “India”);
EntityCollection retrievedAccounts=(EntityCollection)OPCrmService.RetrieveMultiple(queryExp);
-------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------
 QueryExpression qOneToMany = new QueryExpression("task");
                qOneToMany.ColumnSet = new ColumnSet("subject", "description");                
                qOneToMany.Criteria.AddCondition("subject", ConditionOperator.BeginsWith, "Created from PI");               

                EntityCollection qel = _svc.RetrieveMultiple(qOneToMany);
                foreach (Entity e in qel.Entities)
                {
                    _tracing.Trace(String.Format("TESTPI: PlugIn_Create RETRIEVED MULTIPLE - LINKED QUERYEXPRESSION 
                    data: Subject : {0} - Desc : {1}", e["subject"], e["description"]));
                }
                
                
 -------------------------------------------------------------------------------------------------------------
 
 
 var qe = new QueryExpression("systemform")
            {
                ColumnSet = new ColumnSet(true),
                Criteria = new FilterExpression
                {
                    Conditions =
                    {
                        new ConditionExpression("objecttypecode", ConditionOperator.Equal, logicalName),
                        new ConditionExpression("type", ConditionOperator.In, new[] {2,7}),
                    }
                }
            };

            try
            {
                return oService.RetrieveMultiple(qe).Entities;
            }
            catch
            {
                qe.Criteria.Conditions.RemoveAt(qe.Criteria.Conditions.Count - 1);
                return oService.RetrieveMultiple(qe).Entities;
            }


